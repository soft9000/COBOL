*> Mission: Demonstrate an attention-getting, color status, countdown.
*> GnuCOBOL: cobc -x -j -free ConstantClock.cob
*> Source: https://github.com/soft9000/COBOL/tree/master/GnuCOBOL/BANNER
IDENTIFICATION DIVISION.
PROGRAM-ID. CONSTANT-CLOCK.

DATA DIVISION.
WORKING-STORAGE SECTION.
COPY "WS_COLORS.cpy". *> New: Another CONSTANT effort.
COPY "WS_CURRENT_DATE.cpy".
COPY 'CB_RASTER_IO.cpy'.
COPY 'CB_CLS.cpy'. *> New!

01 BACKGROUND-CHAR  PIC X(1) VALUE ':'.
01 RASTER_SS        PIC 9(2).
01 SCREEN_OFFSET_Y  PIC 9(2).

01 TIME-GROUP.
   05 STOP-SECONDS  PIC S9(9). *> New?
   05 SECONDS-LEFT  PIC 9(9).

01 COLOR-GROUP.
   05 COLOR-FORE    PIC 9(1) VALUE WHITE.
   05 COLOR-BACK    PIC 9(1) VALUE BLACK.

78 SEC_DAYS     VALUE (60 * 60 * 24) - 1. *> New!
78 SEC_HOURS    VALUE 60 * 60.
78 SEC_MINUTE   VALUE 60.

01 DISPLAY-GROUP. *> New
   05 HH PIC 99.
   05 FILLER PIC X         VALUE '.'.
   05 MM PIC 99.
   05 FILLER PIC X         VALUE '.'.
   05 SS PIC 99.

01 ACCEPT-LOOP      PIC 9  VALUE 0.
   88 OKAY                 VALUE 1.

PROCEDURE DIVISION.
MOVE FUNCTION CURRENT-DATE to WS-CURRENT-DATE-GROUP.

DISPLAY "Time is "  WS-CURRENT-HOURS ":" 
                    WS-CURRENT-MINUTE '.'
                    WS-CURRENT-SECOND " Hours."

*> Accept Seconds
MOVE 0 TO ACCEPT-LOOP.
PERFORM UNTIL OKAY
    DISPLAY 'SEC_DAYS: ' SEC_DAYS 
            ', SEC_HOURS: ' SEC_HOURS 
            ', Min: ' SEC_MINUTE
    DISPLAY "Stop Seconds? [1 ... " SEC_DAYS "]"
    ACCEPT STOP-SECONDS
    IF STOP-SECONDS >= 1 THEN
        IF STOP-SECONDS <= SEC_DAYS THEN
            MOVE 1 TO ACCEPT-LOOP
        END-IF
    ELSE
        DISPLAY 'Please enter seconds between 1 and ' SEC_DAYS '.'
    END-IF
END-PERFORM.

MOVE BACKGROUND-CHAR TO SCREEN_CHAR.
MOVE 24 TO SCREEN_HEIGHT.
MOVE GREEN TO COLOR_BACK. *> PARAMS-CLS!
PERFORM FOREVER
    MOVE DISPLAY-GROUP TO BANNER_FIELD *> New
    CALL 'PROC_BANNER' USING RASTER-IO
    CALL 'PROC_CLS' USING PARAMS-CLS
    IF RASTER_SUCCESS
        *> INSPECT RASTER_BUFFER REPLACING ALL ' ' BY SCREEN_CHAR
        INSPECT RASTER_BUFFER REPLACING ALL 'X' BY '@'
        MOVE STOP-SECONDS TO SECONDS-LEFT
        COMPUTE HH = SECONDS-LEFT / SEC_HOURS
        COMPUTE MM = (SECONDS-LEFT - (HH * SEC_HOURS)) / SEC_MINUTE
        COMPUTE SS = SECONDS-LEFT - (HH * SEC_HOURS) - (MM * SEC_MINUTE)
        PERFORM VARYING RASTER_SS 
            FROM 1 BY 1 UNTIL RASTER_SS > RASTER_LINES
            PERFORM DISPLAY_COLORIZED
            END-PERFORM
            CALL "C$SLEEP" USING 1 END-CALL
            MOVE BLUE TO COLOR-FORE
            IF HH = 0 THEN
                MOVE CYAN TO COLOR-FORE
                IF MM = 0 THEN
                    MOVE RED TO COLOR-FORE
                    IF SS = 0 THEN
                        DISPLAY "Time's Up!"
                        GOBACK
                    END-IF
                END-IF
            END-IF
            COMPUTE STOP-SECONDS = STOP-SECONDS - 1
        ELSE
            DISPLAY 'Rasterization Error?'
            EXIT PROGRAM
        END-IF
    END-PERFORM.
GOBACK.

DISPLAY_COLORIZED.
    MOVE RASTER_SS TO SCREEN_OFFSET_Y
    ADD 6 TO SCREEN_OFFSET_Y
    DISPLAY NINE_LINES(RASTER_SS) AT LINE SCREEN_OFFSET_Y COLUMN 5 
        WITH FOREGROUND-COLOR IS COLOR-FORE   
        BACKGROUND-COLOR      IS COLOR-BACK.

END PROGRAM CONSTANT-CLOCK.

COPY "PROC_BANNER9.cob".
COPY "PROC_CLS.cob". *> New!

